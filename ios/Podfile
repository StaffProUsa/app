require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
require_relative '../node_modules/react-native-permissions/scripts/setup'

platform :ios, '13.0'
prepare_react_native_project!
# use_modular_headers!


# ⬇️ uncomment wanted permissions
setup_permissions([
  # 'AppTrackingTransparency',
  # 'BluetoothPeripheral',
  # 'Calendars',
  'Camera',
  # 'Contacts',
  # 'FaceID',
  # 'LocationAccuracy',
  'LocationAlways',
  'LocationWhenInUse',
  'MediaLibrary',
  # 'Microphone',
  # 'Motion',
  'Notifications',
  # 'PhotoLibrary',
  # 'PhotoLibraryAddOnly',
  # 'Reminders',
  # 'Siri',
  # 'SpeechRecognition',
  # 'StoreKit',
])



flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled
linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end



target 'staffprousa_app' do
  config = use_native_modules!
  flags = get_default_flags()
  use_react_native!(:path => config[:reactNativePath],

  # Hermes is now enabled by default. Disable by setting this flag to false.
  # Upcoming versions of React Native may rely on get_default_flags(), but
  # we make it explicit here to aid in the React Native upgrade process.
  :hermes_enabled => flags[:hermes_enabled],
  :fabric_enabled => flags[:fabric_enabled],
  # Enables Flipper.
  #
  # Note that if you have use_frameworks! enabled, Flipper will not work and
  # you should disable the next line.
  :flipper_configuration => flipper_config,
  # An absolute path to your application root.
  :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
  


  pod 'RNGoogleSignin', :path => '../node_modules/@react-native-google-signin/google-signin'
  pod 'react-native-document-picker', :path => '../node_modules/react-native-document-picker'
  pod 'react-native-google-maps', :path => '../node_modules/react-native-maps'
  pod 'GoogleMaps'
  pod 'GooglePlaces'
  pod 'Google-Maps-iOS-Utils'
  # pod 'AVFoundation'
  # pod 'Firebase', :modular_headers => true
  # pod 'FirebaseCore', :modular_headers => true
  # pod 'GoogleUtilities', :modular_headers => true
  # pod 'Firebase', :modular_headers => true
  # pod 'FirebaseCore', :modular_headers => true
  # pod 'GoogleUtilities', :modular_headers => true
  # pod 'FirebaseCoreInternal', :modular_headers => true
  # pod 'Firebase/Messaging', :modular_headers => true
  # pod 'react-native-image-picker', :path => '../node_modules/react-native-image-picker'

  # pod 'react-native-image-resizer', :path => '../node_modules/react-native-image-resizer'

  # pod 'react-native-cameraroll', :path => '../node_modules/@react-native-community/cameraroll'

  # pod 'react-native-fetch-blob', :path => '../node_modules/react-native-fetch-blob'
#  pod 'RNFBMessaging', :path => '../node_modules/@react-native-firebase/messaging'

  # pod 'react-native-fbsdk-next', :path => '../node_modules/react-native-fbsdk-next'
  pod 'react-native-video', :path => '../node_modules/react-native-video'
  
  pod 'RNSound', :path => '../node_modules/react-native-sound'
  # pod 'react-native-fetch-blob', :path => '../node_modules/react-native-fetch-blob'
  pod 'react-native-webview', :path => '../node_modules/react-native-webview'

end

post_install do |installer|
  installer.pods_project.build_configurations.each do |config|
  config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
  end
  installer.pods_project.targets.each do |target|
   target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.4'
   end
  #  case target.name when 'VisionCamera'
  #    target.build_configurations.each do |config|
  #      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
  #    end
  #  end

   case target.name when 'RCT-Folly'
     target.build_configurations.each do |config|
       config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '9.0'
     end
   end
   
  end
end

 